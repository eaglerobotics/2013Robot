// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef _ROBOT_H
#define _ROBOT_H
#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "Timer.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/Climber.h"
#include "Subsystems/DriveTrain.h"
#include "Subsystems/Feeder.h"
#include "Subsystems/Shooter.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "InsightLT/InsightLT.h"
#include "OI.h"
class Robot : public IterativeRobot {
public:
	
	Robot();
	
	Command *autonomousCommand;
	static OI *oi;
	LiveWindow *lw;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static DriveTrain* driveTrain;
	static Feeder* feeder;
	static Climber* climber;
	static Shooter* shooter;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestInit();
	virtual void TestPeriodic();
	
private:
	insight::InsightLT mDisplay;
	insight::StringData disp_GitVersion;
	insight::StringData disp_BuildDate;
	insight::DecimalData disp_BattVoltage;
	insight::DecimalData disp_ShootVoltage;
	insight::DecimalData disp_Distance;
	float battvoltage;
	float shootvoltage;
	float distance;
	Timer time;
	Timer period;
	Timer smartTimer;
	float smartDashboardRefresh;
	float timesinceinit;
	bool hasperiodpassed;
    void GlobalInit();
    void GlobalPeriodic();
};
#endif
